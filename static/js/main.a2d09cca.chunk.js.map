{"version":3,"sources":["redux/blockchain/blockchainActions.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["connectFailed","payload","type","updateAccount","account","dispatch","a","initialState","loading","lennyToken","web3","errorMsg","blockchainReducer","state","action","allLenny","allOwnerLennys","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","getState","methods","getLennys","call","getOwnerLennys","console","log","Screen","styled","div","image","SpacerXSmall","SpacerSmall","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","App","useDispatch","useSelector","useEffect","onClick","e","preventDefault","window","ethereum","enable","Web3","request","method","accounts","networkId","LennyToken","networks","lennyTokenNetworkData","eth","Contract","abi","address","on","location","reload","style","padding","_account","_name","createRandomLenny","send","from","value","once","err","then","receipt","flexWrap","map","item","id","dna","level","name","rarity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2d09cca.chunk.js","sourcesContent":["//Constants and imports\nimport Web3 from \"web3\";\nimport LennyToken from \"../../contracts/LennyToken.json\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    //Checks if Metamask isn't instanciated into the browser environment\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        console.log(\"Account \", accounts);\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(\"NetworkId \", networkId);\n\n        const lennyTokenNetworkData = await LennyToken.networks[networkId];\n        if (lennyTokenNetworkData) {\n          const lennyToken = new web3.eth.Contract(\n            LennyToken.abi,\n            lennyTokenNetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lennyToken: lennyToken,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    //dispatch(fetchData(account));\n  };\n};","//Begining state for blockchain\nconst initialState = {\n    loading: false,\n    account: null,\n    lennyToken: null,\n    web3: null,\n    errorMsg: \"\",\n  };\n  \n  const blockchainReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"CONNECTION_REQUEST\":\n        return {\n          ...initialState,\n          loading: true,\n        };\n      case \"CONNECTION_SUCCESS\":\n        return {\n          ...state,\n          loading: false,\n          account: action.payload.account,\n          lennyToken: action.payload.lennyToken,\n          web3: action.payload.web3,\n        };\n      case \"CONNECTION_FAILED\":\n        return {\n          ...initialState,\n          loading: false,\n          errorMsg: action.payload,\n        };\n      case \"UPDATE_ACCOUNT\":\n        return {\n          ...state,\n          account: action.payload.account,\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default blockchainReducer;","const initialState = {\n    loading: false,\n    allLenny: [],\n    allOwnerLennys: [],\n    error: false,\n    errorMsg: \"\",\n  };\n  \n  const dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"CHECK_DATA_REQUEST\":\n        return {\n          ...initialState,\n          loading: true,\n        };\n      case \"CHECK_DATA_SUCCESS\":\n        return {\n          ...initialState,\n          loading: false,\n          allLenny: action.payload.allLenny,\n          allOwnerLennys: action.payload.allOwnerLennys,\n        };\n      case \"CHECK_DATA_FAILED\":\n        return {\n          ...initialState,\n          loading: false,\n          error: true,\n          errorMsg: action.payload,\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default dataReducer;","//Imports \nimport { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\n//Blockcahin state\nconst rootReducer = combineReducers({\n    blockchain: blockchainReducer,\n    data: dataReducer,\n  });\n  \n\n  const middleware = [thunk];\n  \n  const composeEnhancers = compose(applyMiddleware(...middleware));\n  \n\n  const configureStore = () => {\n    return createStore(rootReducer, composeEnhancers);\n  };\n  \n  const store = configureStore();\n  \n  export default store;","import store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLenny = await store.getState().blockchain.lennyToken.methods.getLennys().call();\n      let allOwnerLennys = await store.getState().blockchain.lennyToken.methods.getOwnerLennys(account).call();\n      dispatch(\n        fetchDataSuccess({\n          allLenny,\n          allOwnerLennys,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","import styled from \"styled-components\";\n\nexport const Screen = styled.div`\n  background-color: var(--dark-grey);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--white);\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--white);\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--white);\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;","import React, { useEffect} from \"react\";\nimport './App.css';\nimport { useDispatch,useSelector} from \"react-redux\";\nimport {connect} from \"./redux/blockchain/blockchainActions\"\nimport {fetchData} from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  \n  console.log(data);\n\n\n  const mintNFT = (_account, _name) => {\n    blockchain.lennyToken.methods.createRandomLenny(_name).send({from: _account, value: 100000000000000}).once(\"error\", (err) =>{\n      console.log(err)\n    }).then((receipt) => {\n      console.log(receipt);\n      dispatch(fetchData(blockchain.account));\n    });\n  }\n\n\n  //console.table(blockchain);\n\n  useEffect(() => {\n    if (blockchain.account != null) {\n      console.log(blockchain.account)\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.lennyToken]);\n\n  return (\n    <s.Screen >\n        <s.Container ai={\"center\"}>\n        <s.TextTitle>Make sure you're connected to the Kovan Test Network!</s.TextTitle>\n        </s.Container>\n      {blockchain.account === \"\" || blockchain.lennyToken === null ?(\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n        <s.TextTitle>Connect to the game</s.TextTitle>\n        <s.SpacerXSmall/>\n        <button onClick={(e)=> {\n            e.preventDefault();\n            dispatch(connect());\n        }}>Connect</button>\n      </s.Container>\n      ):( <s.Container ai={\"center\"} style={{padding:\"24px\"}}>\n        <s.TextTitle>Welcome to the game</s.TextTitle>\n        <s.SpacerSmall/>\n        <button onClick={(e)=> {\n            e.preventDefault();\n            mintNFT(blockchain.account, \"Unknown\");\n        }}>Create NFT Lenny</button>\n        <s.SpacerSmall/>\n        \n\n        <s.Container jc={\"space-between\"} fd={\"row\"} style={{flexWrap: \"wrap\"}}>\n        {data.allLenny.map(item => {\n          return (\n            <>\n          <s.Container>\n            <s.TextDescription>ID: {item.id}</s.TextDescription>\n            <s.TextDescription>DNA: {item.dna}</s.TextDescription>\n            <s.TextDescription>LEVEL: {item.level}</s.TextDescription>\n            <s.TextDescription>NAME: {item.name}</s.TextDescription>\n            <s.TextDescription>RARITY: {item.rarity}</s.TextDescription>\n          </s.Container>\n          <s.SpacerSmall/>\n          </>\n          );\n          })}\n        </s.Container>\n          \n\n\n\n      </s.Container>\n      )}\n    </s.Screen>\n  )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}